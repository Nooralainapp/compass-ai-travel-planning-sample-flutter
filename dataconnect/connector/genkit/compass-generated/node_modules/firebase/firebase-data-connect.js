import{_removeServiceInstance as t,getApp as e,_getProvider,_registerComponent as r,registerVersion as n,SDK_VERSION as i}from"https://www.gstatic.com/firebasejs/10.12.4-dataconnect-preview.d986d4bf2/firebase-app.js";class FirebaseError extends Error{constructor(t,e,r){super(e),this.code=t,this.customData=r,this.name="FirebaseError",Object.setPrototypeOf(this,FirebaseError.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,ErrorFactory.prototype.create)}}class ErrorFactory{constructor(t,e,r){this.service=t,this.serviceName=e,this.errors=r}create(t,...e){const r=e[0]||{},n=`${this.service}/${t}`,i=this.errors[t],s=i?function replaceTemplate(t,e){return t.replace(o,((t,r)=>{const n=e[r];return null!=n?String(n):`<${r}?>`}))}(i,r):"Error",a=`${this.serviceName}: ${s} (${n}).`;return new FirebaseError(n,a,r)}}const o=/\{\$([^}]+)}/g;class Component{constructor(t,e,r){this.name=t,this.instanceFactory=e,this.type=r,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(t){return this.instantiationMode=t,this}setMultipleInstances(t){return this.multipleInstances=t,this}setServiceProps(t){return this.serviceProps=t,this}setInstanceCreatedCallback(t){return this.onInstanceCreated=t,this}}var s;!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(s||(s={}));const a={debug:s.DEBUG,verbose:s.VERBOSE,info:s.INFO,warn:s.WARN,error:s.ERROR,silent:s.SILENT},c=s.INFO,h={[s.DEBUG]:"log",[s.VERBOSE]:"log",[s.INFO]:"info",[s.WARN]:"warn",[s.ERROR]:"error"},defaultLogHandler=(t,e,...r)=>{if(e<t.logLevel)return;const n=(new Date).toISOString(),i=h[e];if(!i)throw new Error(`Attempted to log a message with an invalid logType (value: ${e})`);console[i](`[${n}]  ${t.name}:`,...r)};const u="@firebase/data-connect",l="0.0.3-dataconnect-preview.d986d4bf2";let d="";const g="other",p="already-initialized",f="invalid-argument",_="unauthorized";class DataConnectError extends FirebaseError{constructor(t,e){super(t,e),this.code=t,this.message=e,this.toString=()=>`${this.name}: [code=${this.code}]: ${this.message}`}}const m=new class Logger{constructor(t){this.name=t,this._logLevel=c,this._logHandler=defaultLogHandler,this._userLogHandler=null}get logLevel(){return this._logLevel}set logLevel(t){if(!(t in s))throw new TypeError(`Invalid value "${t}" assigned to \`logLevel\``);this._logLevel=t}setLogLevel(t){this._logLevel="string"==typeof t?a[t]:t}get logHandler(){return this._logHandler}set logHandler(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t}get userLogHandler(){return this._userLogHandler}set userLogHandler(t){this._userLogHandler=t}debug(...t){this._userLogHandler&&this._userLogHandler(this,s.DEBUG,...t),this._logHandler(this,s.DEBUG,...t)}log(...t){this._userLogHandler&&this._userLogHandler(this,s.VERBOSE,...t),this._logHandler(this,s.VERBOSE,...t)}info(...t){this._userLogHandler&&this._userLogHandler(this,s.INFO,...t),this._logHandler(this,s.INFO,...t)}warn(...t){this._userLogHandler&&this._userLogHandler(this,s.WARN,...t),this._logHandler(this,s.WARN,...t)}error(...t){this._userLogHandler&&this._userLogHandler(this,s.ERROR,...t),this._logHandler(this,s.ERROR,...t)}}("@firebase/data-connect");function setLogLevel(t){m.setLogLevel(t)}function logDebug(t){m.debug(`DataConnect (${d}): ${t}`)}function logError(t){m.error(`DataConnect (${d}): ${t}`)}class FirebaseAuthProvider{constructor(t,e,r){this._appName=t,this._options=e,this._authProvider=r,this._auth=r.getImmediate({optional:!0}),this._auth||r.onInit((t=>this._auth=t))}getToken(t){return this._auth?this._auth.getToken(t).catch((t=>t&&"auth/token-not-initialized"===t.code?(logDebug("Got auth/token-not-initialized error.  Treating as null token."),null):(logError("Error received when attempting to retrieve token: "+JSON.stringify(t)),Promise.reject(t)))):new Promise(((e,r)=>{setTimeout((()=>{this._auth?this.getToken(t).then(e,r):e(null)}),0)}))}addTokenChangeListener(t){var e;null===(e=this._auth)||void 0===e||e.addAuthTokenListener(t)}removeTokenChangeListener(t){this._authProvider.get().then((e=>e.removeAuthTokenListener(t))).catch((t=>logError(t)))}}const E="query",b="mutation",v="SERVER",C="CACHE";let y;function getRefSerializer(t,e,r){return function toJSON(){return{data:e,refInfo:{name:t.name,variables:t.variables,connectorConfig:Object.assign({projectId:t.dataConnect.app.options.projectId},t.dataConnect.getSettings())},fetchTime:Date.now().toLocaleString(),source:r}}}!function setEncoder(t){y=t}((t=>JSON.stringify(t)));class QueryManager{constructor(t){this.transport=t,this._queries=new Map}track(t,e,r){const n={name:t,variables:e,refType:"query"},i=y(n),o={ref:n,subscriptions:[],currentCache:r||null,lastError:null};return function setIfNotExists(t,e,r){t.has(e)||t.set(e,r)}(this._queries,i,o),this._queries.get(i)}addSubscription(t,e,r,n){const i=y({name:t.name,variables:t.variables,refType:"query"}),o=this._queries.get(i),s={userCallback:e,errCallback:r},unsubscribe=()=>{const t=this._queries.get(i);t.subscriptions=t.subscriptions.filter((t=>t!==s))};if(n&&o.currentCache!==n&&(logDebug("Initial cache found. Comparing dates."),(!o.currentCache||o.currentCache&&function compareDates(t,e){const r=new Date(t),n=new Date(e);return r.getTime()<n.getTime()}(o.currentCache.fetchTime,n.fetchTime))&&(o.currentCache=n)),null!==o.currentCache){e({data:o.currentCache.data,source:"CACHE",ref:t,toJSON:getRefSerializer(t,o.currentCache.data,"CACHE"),fetchTime:o.currentCache.fetchTime}),null!==o.lastError&&r&&r(void 0)}if(o.subscriptions.push({userCallback:e,errCallback:r,unsubscribe:unsubscribe}),!o.currentCache){logDebug(`No cache available for query ${t.name} with variables ${JSON.stringify(t.variables)}. Calling executeQuery.`);this.executeQuery(t).then(void 0,(t=>{}))}return unsubscribe}executeQuery(t){const e=y({name:t.name,variables:t.variables,refType:"query"}),r=this._queries.get(e);return this.transport.invokeQuery(t.name,t.variables).then((e=>{const n=(new Date).toString(),i=Object.assign(Object.assign({},e),{source:"SERVER",ref:t,toJSON:getRefSerializer(t,e.data,"SERVER"),fetchTime:n});return r.subscriptions.forEach((t=>{t.userCallback(i)})),r.currentCache={data:e.data,source:"CACHE",fetchTime:n},i}),(t=>{throw r.lastError=t,r.subscriptions.forEach((e=>{e.errCallback&&e.errCallback(t)})),t}))}enableEmulator(t,e){this.transport.useEmulator(t,e)}}function addToken(t,e){if(!e)return t;const r=new URL(t);return r.searchParams.append("key",e),r.toString()}let T=globalThis.fetch;function getGoogApiClientValue(t){let e="gl-js/ fire/"+d;return t&&(e+=" web/gen"),e}function dcFetch(t,e,{signal:r},n,i){if(!T)throw new DataConnectError(g,"No Fetch Implementation detected!");const o={"Content-Type":"application/json","X-Goog-Api-Client":getGoogApiClientValue(i)};n&&(o["X-Firebase-Auth-Token"]=n);const s=JSON.stringify(e);return logDebug(`Making request out to ${t} with body: ${s}`),T(t,{body:s,method:"POST",headers:o,signal:r}).catch((t=>{throw new DataConnectError(g,"Failed to fetch: "+JSON.stringify(t))})).then((async t=>{let e=null;try{e=await t.json()}catch(t){throw new DataConnectError(g,JSON.stringify(t))}const r=function getMessage(t){if("message"in t)return t.message;return JSON.stringify(t)}(e);if(t.status>=400){if(logError("Error while performing request: "+JSON.stringify(e)),401===t.status)throw new DataConnectError(_,r);throw new DataConnectError(g,r)}return e})).then((t=>{if(t.errors&&t.errors.length){const e=JSON.stringify(t.errors);throw logError("DataConnect error while performing request: "+e),new DataConnectError(g,e)}return t}))}class RESTTransport{constructor(t,e,r,n,i=!1){var o;this.apiKey=e,this.authProvider=r,this._isUsingGen=i,this._host="",this._location="l",this._connectorName="",this._secure=!0,this._project="p",this._accessToken=null,this._authInitialized=!1,this._lastToken=null,this.invokeQuery=(t,e)=>{const r=new AbortController,n=this.withRetry((()=>dcFetch(addToken(`${this.endpointUrl}:executeQuery`,this.apiKey),{name:`projects/${this._project}/locations/${this._location}/services/${this._serviceName}/connectors/${this._connectorName}`,operationName:t,variables:e},r,this._accessToken,this._isUsingGen)));return{then:n.then.bind(n),catch:n.catch.bind(n)}},this.invokeMutation=(t,e)=>{const r=new AbortController,n=this.withRetry((()=>dcFetch(addToken(`${this.endpointUrl}:executeMutation`,this.apiKey),{name:`projects/${this._project}/locations/${this._location}/services/${this._serviceName}/connectors/${this._connectorName}`,operationName:t,variables:e},r,this._accessToken,this._isUsingGen)));return{then:n.then.bind(n),cancel:()=>r.abort()}},n&&("number"==typeof n.port&&(this._port=n.port),void 0!==n.sslEnabled&&(this._secure=n.sslEnabled),this._host=n.host);const{location:s,projectId:a,connector:c,service:h}=t;if(s&&(this._location=s),a&&(this._project=a),this._serviceName=h,!c)throw new DataConnectError(f,"Connector Name required!");this._connectorName=c,null===(o=this.authProvider)||void 0===o||o.addTokenChangeListener((t=>{logDebug(`New Token Available: ${t}`),this._accessToken=t}))}get endpointUrl(){return function urlBuilder(t,e){const{connector:r,location:n,projectId:i,service:o}=t,{host:s,sslEnabled:a,port:c}=e;let h=`${a?"https":"http"}://${s||"firebasedataconnect.googleapis.com"}`;if("number"==typeof c)h+=`:${c}`;else if(void 0!==c)throw logError("Port type is of an invalid type"),new DataConnectError(f,"Incorrect type for port passed in!");return`${h}/v1alpha/projects/${i}/locations/${n}/services/${o}/connectors/${r}`}({connector:this._connectorName,location:this._location,projectId:this._project,service:this._serviceName},{host:this._host,sslEnabled:this._secure,port:this._port})}useEmulator(t,e,r){this._host=t,"number"==typeof e&&(this._port=e),void 0!==r&&(this._secure=r)}onTokenChanged(t){this._accessToken=t}getWithAuth(t=!1){let e=new Promise((t=>t(this._accessToken)));return this._authInitialized||(e=this.authProvider?this.authProvider.getToken(t).then((t=>t?(this._accessToken=t.accessToken,this._accessToken):null)):new Promise((t=>t("")))),e}_setLastToken(t){this._lastToken=t}withRetry(t,e=!1){let r=!1;return this.getWithAuth(e).then((t=>(r=this._lastToken!==t,this._lastToken=t,t))).then(t).catch((n=>{if("code"in n&&n.code===_&&!e&&r)return logDebug("Retrying due to unauthorized"),this.withRetry(t,!0);throw n}))}}function mutationRef(t,e,r){t.setInitialized();return{dataConnect:t,name:e,refType:"mutation",variables:r}}class MutationManager{constructor(t){this._transport=t,this._inflight=[]}executeMutation(t){const e=this._transport.invokeMutation(t.name,t.variables),r=e.then((e=>Object.assign(Object.assign({},e),{source:"SERVER",ref:t,fetchTime:Date.now().toLocaleString()})));this._inflight.push(e);const removePromise=()=>this._inflight=this._inflight.filter((t=>t!==e));return e.then(removePromise,removePromise),r}}function executeMutation(t){return t.dataConnect._mutationManager.executeMutation(t)}const w="FIREBASE_DATA_CONNECT_EMULATOR_HOST";function parseOptions(t){const[e,r]=t.split("://"),n="https"===e,[i,o]=r.split(":");return{host:i,port:Number(o),sslEnabled:n}}class DataConnect{constructor(t,e,r){if(this.app=t,this.dataConnectOptions=e,this._authProvider=r,this.isEmulator=!1,this.initialized=!1,this._isUsingGeneratedSdk=!1,"undefined"!=typeof process&&process.env){const t=process.env.FIREBASE_DATA_CONNECT_EMULATOR_HOST;t&&(logDebug("Found custom host. Using emulator"),this.isEmulator=!0,this._transportOptions=parseOptions(t))}}_useGeneratedSdk(){this._isUsingGeneratedSdk||(this._isUsingGeneratedSdk=!0)}_delete(){return t(this.app,"data-connect",JSON.stringify(this.getSettings())),Promise.resolve()}getSettings(){const t=JSON.parse(JSON.stringify(this.dataConnectOptions));return delete t.projectId,t}setInitialized(){this.initialized||(void 0===this._transportClass&&(logDebug("transportClass not provided. Defaulting to RESTTransport."),this._transportClass=RESTTransport),this._authProvider&&(this._authTokenProvider=new FirebaseAuthProvider(this.app.name,this.app.options,this._authProvider)),this.initialized=!0,this._transport=new this._transportClass(this.dataConnectOptions,this.app.options.apiKey,this._authTokenProvider,void 0,this._isUsingGeneratedSdk),this._transportOptions&&this._transport.useEmulator(this._transportOptions.host,this._transportOptions.port,this._transportOptions.sslEnabled),this._queryManager=new QueryManager(this._transport),this._mutationManager=new MutationManager(this._transport))}enableEmulator(t){if(this.initialized)throw logError("enableEmulator called after initialization"),new DataConnectError(p,"DataConnect instance already initialized!");this._transportOptions=t,this.isEmulator=!0}}function connectDataConnectEmulator(t,e,r,n=!1){t.enableEmulator({host:e,port:r,sslEnabled:n})}function getDataConnect(t,r){let n,i;"location"in t?(i=t,n=e()):(i=r,n=t),n&&0!==Object.keys(n).length||(n=e());const o=_getProvider(n,"data-connect"),s=JSON.stringify(i);if(o.isInitialized(s)){const t=o.getImmediate({identifier:s}),e=o.getOptions(s);if(Object.keys(e).length>0)return logDebug("Re-using cached instance"),t}return validateDCOptions(i),logDebug("Creating new DataConnect instance"),o.initialize({instanceIdentifier:s,options:i})}function validateDCOptions(t){if(!t)throw new DataConnectError(f,"DC Option Required");return["connector","location","service"].forEach((e=>{if(null===t[e]||void 0===t[e])throw new DataConnectError(f,`${e} Required`)})),!0}function terminate(t){return t._delete()}function executeQuery(t){return t.dataConnect._queryManager.executeQuery(t)}function queryRef(t,e,r,n){return t.setInitialized(),t._queryManager.track(e,r,n),{dataConnect:t,refType:"query",name:e,variables:r}}function toQueryRef(t){const{refInfo:{name:e,variables:r,connectorConfig:n}}=t;return queryRef(getDataConnect(n),e,r)}function validateArgs(t,e,r,n){let i,o;if(e&&"enableEmulator"in e?(i=e,o=r):(i=getDataConnect(t),o=e),!i||!o&&n)throw new DataConnectError(f,"Variables required.");return{dc:i,vars:o}}function subscribe(t,e,r,n){let i,o,s;if("refInfo"in t){const e=t,{data:r,source:n,fetchTime:s}=e;o={data:r,source:n,fetchTime:s},i=toQueryRef(e)}else i=t;if("function"==typeof e?s=e:(s=e.onNext,r=e.onErr,e.onComplete),!s)throw new DataConnectError(f,"Must provide onNext");return i.dataConnect._queryManager.addSubscription(i,s,r,o)}!function registerDataConnect(t){!function setSDKVersion(t){d=t}(i),r(new Component("data-connect",((t,{instanceIdentifier:e,options:r})=>{const n=t.getProvider("app").getImmediate(),i=t.getProvider("auth-internal");let o=r;if(e&&(o=JSON.parse(e)),!n.options.projectId)throw new DataConnectError(f,"Project ID must be provided. Did you pass in a proper projectId to initializeApp?");return new DataConnect(n,Object.assign(Object.assign({},o),{projectId:n.options.projectId}),i)}),"PUBLIC").setMultipleInstances(!0)),n(u,l,t),n(u,l,"esm2017")}();export{DataConnect,w as FIREBASE_DATA_CONNECT_EMULATOR_HOST_VAR,FirebaseAuthProvider,b as MUTATION_STR,MutationManager,E as QUERY_STR,C as SOURCE_CACHE,v as SOURCE_SERVER,connectDataConnectEmulator,executeMutation,executeQuery,getDataConnect,mutationRef,parseOptions,queryRef,setLogLevel,subscribe,terminate,toQueryRef,validateArgs,validateDCOptions};

//# sourceMappingURL=firebase-data-connect.js.map
